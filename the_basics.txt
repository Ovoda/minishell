After a command is entered, the following things are done:

1-	Command is entered and if length is non-null, keep it in history. (Optionnal)
2-	Parsing : Parsing is the breaking up of commands into individual words and strings (Split ?)
3-	Checking for special characters like pipes, etc is done 
4-	Checking if built-in commands are asked for. 
5-	If pipes are present, handling pipes.
6-	Executing system commands and libraries by forking a child and calling execvp.
7-	Printing current directory name and asking for next input.


What we have to do :

1- Show a prompt when waiting for a new command
2- Search and launch the right executable (based on the PATH variable)
	- How to set up ENV variables ?
	- PATH specifies the directories in which executable programs* are located on the machine that can be started
	without knowing and typing the whole path to the file on the command line.
3 - Implement the builtins like in bash:
	- echo with option ’-n’ // ('-n' flag does not output the trailing newline)
	- cd with only a relative or absolute path
	- pwd
	- export // (it marks an environment variables to be exported to child-processes.)
	- unset // (it removes an environment varaible)
	- env // (it prints all ENV variables)
	- exit // (exit the shell)
4 - ';' in the command should separate commands like in bash // (Unlike '&&', if there is a mistale, shell will still
	run the next command).
5 - Single and double quotes :
	- Single : 
		Enclosing characters in single quotes (') preserves the literal value of each character within the quotes.
		A single quote may not occur between single quotes, even when preceded by a backslash. 
	- Doubles :
		Enclosing characters in double quotes (") preserves the literal value of all characters within the quotes,
		with the exception of $, `, \, and, when history expansion is enabled, !. The characters $ and ` retain their special
		meaning within double quotes (see Shell Expansions). The backslash retains its special meaning only when followed by
		one of the following characters: $, `, ", \, or newline. Within double quotes, backslashes that are followed by
		one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified.
		A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion
		will be performed unless an ! appearing in double quotes is escaped using a backslash. The backslash preceding the
		! is not removed.
		The special parameters * and @ have special meaning when in double quotes
6 - redirection
	- to a file :
		>> : a the end of the file
		>  : create a new file (erase the file if already existing)
	- from a file <
7 - thing1 | thing2 does the same thing as thing1 > temp_file && thing2 < temp_file
	(Pipe allows redirection of the output channel from one control to the input channel of another)
8 - $? is used to find the return value of the last executed command.
9 - Ctrl+D : means end of file.
	Ctrl+C : means “interrupt”, i.e., stop what you're doing. Technically, pressing ^C sends the INT signal
	Ctrl+\ : sends the QUIT signal, which by default terminates an application, and which not so many programs intercept.
